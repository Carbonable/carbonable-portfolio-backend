// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	DisplayableValue() DisplayableValueResolver
	ProjectAbi() ProjectAbiResolver
	Query() QueryResolver
	ValueItem() ValueItemResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CustomerTokens struct {
		Address        func(childComplexity int) int
		ID             func(childComplexity int) int
		Project        func(childComplexity int) int
		ProjectAddress func(childComplexity int) int
		Slot           func(childComplexity int) int
		TokenID        func(childComplexity int) int
		Value          func(childComplexity int) int
	}

	CustomerTokensDto struct {
		Abi             func(childComplexity int) int
		Address         func(childComplexity int) int
		AssetArea       func(childComplexity int) int
		AssetCarbonUnit func(childComplexity int) int
		ID              func(childComplexity int) int
		Image           func(childComplexity int) int
		MinterAddress   func(childComplexity int) int
		Name            func(childComplexity int) int
		OffseterAddress func(childComplexity int) int
		Slot            func(childComplexity int) int
		Tokens          func(childComplexity int) int
		YielderAddress  func(childComplexity int) int
	}

	CustomerTokensResponse struct {
		Global   func(childComplexity int) int
		Projects func(childComplexity int) int
	}

	DisplayableValue struct {
		DisplayableValue func(childComplexity int) int
		Type             func(childComplexity int) int
		Value            func(childComplexity int) int
	}

	GlobalDeposited struct {
		Total func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Project struct {
		Abi             func(childComplexity int) int
		Address         func(childComplexity int) int
		ID              func(childComplexity int) int
		Image           func(childComplexity int) int
		MinterAddress   func(childComplexity int) int
		Name            func(childComplexity int) int
		OffseterAddress func(childComplexity int) int
		Slot            func(childComplexity int) int
		Tokens          func(childComplexity int) int
		YielderAddress  func(childComplexity int) int
	}

	ProjectAbi struct {
		Minter  func(childComplexity int) int
		Project func(childComplexity int) int
	}

	Query struct {
		CustomerTokens func(childComplexity int, address string) int
		Node           func(childComplexity int, id string) int
		Nodes          func(childComplexity int, ids []string) int
	}

	Token struct {
		TokenID func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	ValueItem struct {
		Decimals func(childComplexity int) int
		Symbol   func(childComplexity int) int
		Value    func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "CustomerTokens.address":
		if e.complexity.CustomerTokens.Address == nil {
			break
		}

		return e.complexity.CustomerTokens.Address(childComplexity), true

	case "CustomerTokens.id":
		if e.complexity.CustomerTokens.ID == nil {
			break
		}

		return e.complexity.CustomerTokens.ID(childComplexity), true

	case "CustomerTokens.project":
		if e.complexity.CustomerTokens.Project == nil {
			break
		}

		return e.complexity.CustomerTokens.Project(childComplexity), true

	case "CustomerTokens.projectAddress":
		if e.complexity.CustomerTokens.ProjectAddress == nil {
			break
		}

		return e.complexity.CustomerTokens.ProjectAddress(childComplexity), true

	case "CustomerTokens.slot":
		if e.complexity.CustomerTokens.Slot == nil {
			break
		}

		return e.complexity.CustomerTokens.Slot(childComplexity), true

	case "CustomerTokens.tokenID":
		if e.complexity.CustomerTokens.TokenID == nil {
			break
		}

		return e.complexity.CustomerTokens.TokenID(childComplexity), true

	case "CustomerTokens.value":
		if e.complexity.CustomerTokens.Value == nil {
			break
		}

		return e.complexity.CustomerTokens.Value(childComplexity), true

	case "CustomerTokensDto.abi":
		if e.complexity.CustomerTokensDto.Abi == nil {
			break
		}

		return e.complexity.CustomerTokensDto.Abi(childComplexity), true

	case "CustomerTokensDto.address":
		if e.complexity.CustomerTokensDto.Address == nil {
			break
		}

		return e.complexity.CustomerTokensDto.Address(childComplexity), true

	case "CustomerTokensDto.asset_area":
		if e.complexity.CustomerTokensDto.AssetArea == nil {
			break
		}

		return e.complexity.CustomerTokensDto.AssetArea(childComplexity), true

	case "CustomerTokensDto.asset_carbon_unit":
		if e.complexity.CustomerTokensDto.AssetCarbonUnit == nil {
			break
		}

		return e.complexity.CustomerTokensDto.AssetCarbonUnit(childComplexity), true

	case "CustomerTokensDto.id":
		if e.complexity.CustomerTokensDto.ID == nil {
			break
		}

		return e.complexity.CustomerTokensDto.ID(childComplexity), true

	case "CustomerTokensDto.image":
		if e.complexity.CustomerTokensDto.Image == nil {
			break
		}

		return e.complexity.CustomerTokensDto.Image(childComplexity), true

	case "CustomerTokensDto.minter_address":
		if e.complexity.CustomerTokensDto.MinterAddress == nil {
			break
		}

		return e.complexity.CustomerTokensDto.MinterAddress(childComplexity), true

	case "CustomerTokensDto.name":
		if e.complexity.CustomerTokensDto.Name == nil {
			break
		}

		return e.complexity.CustomerTokensDto.Name(childComplexity), true

	case "CustomerTokensDto.offseter_address":
		if e.complexity.CustomerTokensDto.OffseterAddress == nil {
			break
		}

		return e.complexity.CustomerTokensDto.OffseterAddress(childComplexity), true

	case "CustomerTokensDto.slot":
		if e.complexity.CustomerTokensDto.Slot == nil {
			break
		}

		return e.complexity.CustomerTokensDto.Slot(childComplexity), true

	case "CustomerTokensDto.tokens":
		if e.complexity.CustomerTokensDto.Tokens == nil {
			break
		}

		return e.complexity.CustomerTokensDto.Tokens(childComplexity), true

	case "CustomerTokensDto.yielder_address":
		if e.complexity.CustomerTokensDto.YielderAddress == nil {
			break
		}

		return e.complexity.CustomerTokensDto.YielderAddress(childComplexity), true

	case "CustomerTokensResponse.global":
		if e.complexity.CustomerTokensResponse.Global == nil {
			break
		}

		return e.complexity.CustomerTokensResponse.Global(childComplexity), true

	case "CustomerTokensResponse.projects":
		if e.complexity.CustomerTokensResponse.Projects == nil {
			break
		}

		return e.complexity.CustomerTokensResponse.Projects(childComplexity), true

	case "DisplayableValue.displayable_value":
		if e.complexity.DisplayableValue.DisplayableValue == nil {
			break
		}

		return e.complexity.DisplayableValue.DisplayableValue(childComplexity), true

	case "DisplayableValue.type":
		if e.complexity.DisplayableValue.Type == nil {
			break
		}

		return e.complexity.DisplayableValue.Type(childComplexity), true

	case "DisplayableValue.value":
		if e.complexity.DisplayableValue.Value == nil {
			break
		}

		return e.complexity.DisplayableValue.Value(childComplexity), true

	case "GlobalDeposited.total":
		if e.complexity.GlobalDeposited.Total == nil {
			break
		}

		return e.complexity.GlobalDeposited.Total(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Project.abi":
		if e.complexity.Project.Abi == nil {
			break
		}

		return e.complexity.Project.Abi(childComplexity), true

	case "Project.address":
		if e.complexity.Project.Address == nil {
			break
		}

		return e.complexity.Project.Address(childComplexity), true

	case "Project.id":
		if e.complexity.Project.ID == nil {
			break
		}

		return e.complexity.Project.ID(childComplexity), true

	case "Project.image":
		if e.complexity.Project.Image == nil {
			break
		}

		return e.complexity.Project.Image(childComplexity), true

	case "Project.minterAddress":
		if e.complexity.Project.MinterAddress == nil {
			break
		}

		return e.complexity.Project.MinterAddress(childComplexity), true

	case "Project.name":
		if e.complexity.Project.Name == nil {
			break
		}

		return e.complexity.Project.Name(childComplexity), true

	case "Project.offseterAddress":
		if e.complexity.Project.OffseterAddress == nil {
			break
		}

		return e.complexity.Project.OffseterAddress(childComplexity), true

	case "Project.slot":
		if e.complexity.Project.Slot == nil {
			break
		}

		return e.complexity.Project.Slot(childComplexity), true

	case "Project.tokens":
		if e.complexity.Project.Tokens == nil {
			break
		}

		return e.complexity.Project.Tokens(childComplexity), true

	case "Project.yielderAddress":
		if e.complexity.Project.YielderAddress == nil {
			break
		}

		return e.complexity.Project.YielderAddress(childComplexity), true

	case "ProjectAbi.minter":
		if e.complexity.ProjectAbi.Minter == nil {
			break
		}

		return e.complexity.ProjectAbi.Minter(childComplexity), true

	case "ProjectAbi.project":
		if e.complexity.ProjectAbi.Project == nil {
			break
		}

		return e.complexity.ProjectAbi.Project(childComplexity), true

	case "Query.customerTokens":
		if e.complexity.Query.CustomerTokens == nil {
			break
		}

		args, err := ec.field_Query_customerTokens_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CustomerTokens(childComplexity, args["address"].(string)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "Token.token_id":
		if e.complexity.Token.TokenID == nil {
			break
		}

		return e.complexity.Token.TokenID(childComplexity), true

	case "Token.value":
		if e.complexity.Token.Value == nil {
			break
		}

		return e.complexity.Token.Value(childComplexity), true

	case "ValueItem.decimals":
		if e.complexity.ValueItem.Decimals == nil {
			break
		}

		return e.complexity.ValueItem.Decimals(childComplexity), true

	case "ValueItem.symbol":
		if e.complexity.ValueItem.Symbol == nil {
			break
		}

		return e.complexity.ValueItem.Symbol(childComplexity), true

	case "ValueItem.value":
		if e.complexity.ValueItem.Value == nil {
			break
		}

		return e.complexity.ValueItem.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../customertokens.graphql", Input: `type Token {
  token_id: ID!
  value: String
}

type GlobalDeposited {
  total: String!
}

type CustomerTokensDto {
  id: ID!
  name: String!
  slot: Int!
  address: String!
  minter_address: String!
  yielder_address: String
  offseter_address: String
  abi: ProjectAbi!
  image: String!
  tokens: [Token]
  asset_area: String!
  asset_carbon_unit: String!
}

type CustomerTokensResponse {
  global: GlobalDeposited!
  projects: [CustomerTokensDto!]
}

extend type Query {
  """
  The list of tokens per project for an address
  """
  customerTokens(address: String!): CustomerTokensResponse!
}
`, BuiltIn: false},
	{Name: "../ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type CustomerTokens implements Node {
  id: ID!
  address: String!
  projectAddress: String!
  slot: Int!
  tokenID: String!
  value: String!
  project: [Project!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/carbonable/carbonable-portfolio-backend/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Project implements Node {
  id: ID!
  address: String!
  slot: Int!
  minterAddress: String!
  name: String!
  abi: ProjectAbi!
  image: String!
  yielderAddress: String
  offseterAddress: String
  tokens: [CustomerTokens!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
}
`, BuiltIn: false},
	{Name: "../models.graphql", Input: `type ValueItem {
  symbol: String
  decimals: Int!
  value: String!
}

type DisplayableValue {
  type: String!
  value: ValueItem!
  displayable_value: String!
}
`, BuiltIn: false},
	{Name: "../project.graphql", Input: `type ProjectAbi {
  project: String!
  minter: String!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
