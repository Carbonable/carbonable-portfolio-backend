package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	"github.com/NethermindEth/juno/core/felt"
	"github.com/NethermindEth/starknet.go/utils"
	"github.com/carbonable/carbonable-portfolio-backend/ent/customertokens"
	"github.com/carbonable/carbonable-portfolio-backend/ent/gql"
	"github.com/carbonable/carbonable-portfolio-backend/internal/model"
)

// CustomerTokens is the resolver for the customerTokens field.
func (r *queryResolver) CustomerTokens(ctx context.Context, address string) (*gql.CustomerTokensResponse, error) {
	addressFelt, err := utils.HexToFelt(address)
	if err != nil {
		return nil, err
	}

	projects, err := r.Client.Project.Query().All(ctx)
	customerTokens, err := r.Client.CustomerTokens.Query().Where(customertokens.AddressEQ(addressFelt.String())).All(ctx)

	var ctds []*gql.CustomerTokensDto
	total, _ := model.NewDisplayableValue(felt.Zero, 6, model.SlotValue)

	for _, p := range projects {
		tokens := []*gql.Token{}
		var valFelt felt.Felt
		for _, ct := range customerTokens {
			if p.Address == ct.ProjectAddress && p.Slot == ct.Slot {
				err := valFelt.UnmarshalJSON([]byte(ct.Value))
				if err != nil {
					return nil, err
				}
				dv, err := model.NewDisplayableValue(valFelt, 6, model.SlotValue)
				if err != nil {
					return nil, err
				}
				tokens = append(tokens, &gql.Token{
					TokenID: ct.TokenID,
					Value:   &ct.Value,
				})

				total.Add(dv)
			}
		}

		ctd := &gql.CustomerTokensDto{
			Name:            p.Name,
			Address:         p.Address,
			MinterAddress:   p.MinterAddress,
			YielderAddress:  &p.YielderAddress,
			OffseterAddress: &p.OffseterAddress,
			Tokens:          tokens,
			Slot:            p.Slot,
			Abi:             &p.Abi,
			Image:           p.Image,
			AssetArea:       "",
			AssetCarbonUnit: "",
		}
		ctds = append(ctds, ctd)
	}

	global := &gql.GlobalDeposited{
		Total: total.DisplayableValue,
	}

	return &gql.CustomerTokensResponse{
		Global:   global,
		Projects: ctds,
	}, nil
}
