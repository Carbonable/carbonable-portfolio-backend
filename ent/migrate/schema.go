// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CustomerTokensColumns holds the columns for the "customer_tokens" table.
	CustomerTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address", Type: field.TypeString},
		{Name: "slot", Type: field.TypeInt},
		{Name: "token_id", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
	}
	// CustomerTokensTable holds the schema information for the "customer_tokens" table.
	CustomerTokensTable = &schema.Table{
		Name:       "customer_tokens",
		Columns:    CustomerTokensColumns,
		PrimaryKey: []*schema.Column{CustomerTokensColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "customertokens_token_id_slot",
				Unique:  true,
				Columns: []*schema.Column{CustomerTokensColumns[3], CustomerTokensColumns[2]},
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address", Type: field.TypeString},
		{Name: "slot", Type: field.TypeInt},
		{Name: "minter_address", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "abi", Type: field.TypeJSON},
		{Name: "image", Type: field.TypeString, Size: 2147483647},
		{Name: "yielder_address", Type: field.TypeString, Nullable: true},
		{Name: "offseter_address", Type: field.TypeString, Nullable: true},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "project_address_slot",
				Unique:  true,
				Columns: []*schema.Column{ProjectsColumns[1], ProjectsColumns[2]},
			},
		},
	}
	// ProjectTokensColumns holds the columns for the "project_tokens" table.
	ProjectTokensColumns = []*schema.Column{
		{Name: "project_id", Type: field.TypeInt},
		{Name: "customer_tokens_id", Type: field.TypeInt},
	}
	// ProjectTokensTable holds the schema information for the "project_tokens" table.
	ProjectTokensTable = &schema.Table{
		Name:       "project_tokens",
		Columns:    ProjectTokensColumns,
		PrimaryKey: []*schema.Column{ProjectTokensColumns[0], ProjectTokensColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "project_tokens_project_id",
				Columns:    []*schema.Column{ProjectTokensColumns[0]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "project_tokens_customer_tokens_id",
				Columns:    []*schema.Column{ProjectTokensColumns[1]},
				RefColumns: []*schema.Column{CustomerTokensColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CustomerTokensTable,
		ProjectsTable,
		ProjectTokensTable,
	}
)

func init() {
	ProjectTokensTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectTokensTable.ForeignKeys[1].RefTable = CustomerTokensTable
}
