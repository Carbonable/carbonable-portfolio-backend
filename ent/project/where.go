// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/carbonable/carbonable-portfolio-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAddress, v))
}

// Slot applies equality check predicate on the "slot" field. It's identical to SlotEQ.
func Slot(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSlot, v))
}

// MinterAddress applies equality check predicate on the "minter_address" field. It's identical to MinterAddressEQ.
func MinterAddress(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldMinterAddress, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldImage, v))
}

// YielderAddress applies equality check predicate on the "yielder_address" field. It's identical to YielderAddressEQ.
func YielderAddress(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldYielderAddress, v))
}

// OffseterAddress applies equality check predicate on the "offseter_address" field. It's identical to OffseterAddressEQ.
func OffseterAddress(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOffseterAddress, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldAddress, v))
}

// SlotEQ applies the EQ predicate on the "slot" field.
func SlotEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSlot, v))
}

// SlotNEQ applies the NEQ predicate on the "slot" field.
func SlotNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldSlot, v))
}

// SlotIn applies the In predicate on the "slot" field.
func SlotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldSlot, vs...))
}

// SlotNotIn applies the NotIn predicate on the "slot" field.
func SlotNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldSlot, vs...))
}

// SlotGT applies the GT predicate on the "slot" field.
func SlotGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldSlot, v))
}

// SlotGTE applies the GTE predicate on the "slot" field.
func SlotGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldSlot, v))
}

// SlotLT applies the LT predicate on the "slot" field.
func SlotLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldSlot, v))
}

// SlotLTE applies the LTE predicate on the "slot" field.
func SlotLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldSlot, v))
}

// MinterAddressEQ applies the EQ predicate on the "minter_address" field.
func MinterAddressEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldMinterAddress, v))
}

// MinterAddressNEQ applies the NEQ predicate on the "minter_address" field.
func MinterAddressNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldMinterAddress, v))
}

// MinterAddressIn applies the In predicate on the "minter_address" field.
func MinterAddressIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldMinterAddress, vs...))
}

// MinterAddressNotIn applies the NotIn predicate on the "minter_address" field.
func MinterAddressNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldMinterAddress, vs...))
}

// MinterAddressGT applies the GT predicate on the "minter_address" field.
func MinterAddressGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldMinterAddress, v))
}

// MinterAddressGTE applies the GTE predicate on the "minter_address" field.
func MinterAddressGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldMinterAddress, v))
}

// MinterAddressLT applies the LT predicate on the "minter_address" field.
func MinterAddressLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldMinterAddress, v))
}

// MinterAddressLTE applies the LTE predicate on the "minter_address" field.
func MinterAddressLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldMinterAddress, v))
}

// MinterAddressContains applies the Contains predicate on the "minter_address" field.
func MinterAddressContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldMinterAddress, v))
}

// MinterAddressHasPrefix applies the HasPrefix predicate on the "minter_address" field.
func MinterAddressHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldMinterAddress, v))
}

// MinterAddressHasSuffix applies the HasSuffix predicate on the "minter_address" field.
func MinterAddressHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldMinterAddress, v))
}

// MinterAddressEqualFold applies the EqualFold predicate on the "minter_address" field.
func MinterAddressEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldMinterAddress, v))
}

// MinterAddressContainsFold applies the ContainsFold predicate on the "minter_address" field.
func MinterAddressContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldMinterAddress, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldImage, v))
}

// YielderAddressEQ applies the EQ predicate on the "yielder_address" field.
func YielderAddressEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldYielderAddress, v))
}

// YielderAddressNEQ applies the NEQ predicate on the "yielder_address" field.
func YielderAddressNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldYielderAddress, v))
}

// YielderAddressIn applies the In predicate on the "yielder_address" field.
func YielderAddressIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldYielderAddress, vs...))
}

// YielderAddressNotIn applies the NotIn predicate on the "yielder_address" field.
func YielderAddressNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldYielderAddress, vs...))
}

// YielderAddressGT applies the GT predicate on the "yielder_address" field.
func YielderAddressGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldYielderAddress, v))
}

// YielderAddressGTE applies the GTE predicate on the "yielder_address" field.
func YielderAddressGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldYielderAddress, v))
}

// YielderAddressLT applies the LT predicate on the "yielder_address" field.
func YielderAddressLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldYielderAddress, v))
}

// YielderAddressLTE applies the LTE predicate on the "yielder_address" field.
func YielderAddressLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldYielderAddress, v))
}

// YielderAddressContains applies the Contains predicate on the "yielder_address" field.
func YielderAddressContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldYielderAddress, v))
}

// YielderAddressHasPrefix applies the HasPrefix predicate on the "yielder_address" field.
func YielderAddressHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldYielderAddress, v))
}

// YielderAddressHasSuffix applies the HasSuffix predicate on the "yielder_address" field.
func YielderAddressHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldYielderAddress, v))
}

// YielderAddressIsNil applies the IsNil predicate on the "yielder_address" field.
func YielderAddressIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldYielderAddress))
}

// YielderAddressNotNil applies the NotNil predicate on the "yielder_address" field.
func YielderAddressNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldYielderAddress))
}

// YielderAddressEqualFold applies the EqualFold predicate on the "yielder_address" field.
func YielderAddressEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldYielderAddress, v))
}

// YielderAddressContainsFold applies the ContainsFold predicate on the "yielder_address" field.
func YielderAddressContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldYielderAddress, v))
}

// OffseterAddressEQ applies the EQ predicate on the "offseter_address" field.
func OffseterAddressEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOffseterAddress, v))
}

// OffseterAddressNEQ applies the NEQ predicate on the "offseter_address" field.
func OffseterAddressNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOffseterAddress, v))
}

// OffseterAddressIn applies the In predicate on the "offseter_address" field.
func OffseterAddressIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOffseterAddress, vs...))
}

// OffseterAddressNotIn applies the NotIn predicate on the "offseter_address" field.
func OffseterAddressNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOffseterAddress, vs...))
}

// OffseterAddressGT applies the GT predicate on the "offseter_address" field.
func OffseterAddressGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOffseterAddress, v))
}

// OffseterAddressGTE applies the GTE predicate on the "offseter_address" field.
func OffseterAddressGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOffseterAddress, v))
}

// OffseterAddressLT applies the LT predicate on the "offseter_address" field.
func OffseterAddressLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOffseterAddress, v))
}

// OffseterAddressLTE applies the LTE predicate on the "offseter_address" field.
func OffseterAddressLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOffseterAddress, v))
}

// OffseterAddressContains applies the Contains predicate on the "offseter_address" field.
func OffseterAddressContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldOffseterAddress, v))
}

// OffseterAddressHasPrefix applies the HasPrefix predicate on the "offseter_address" field.
func OffseterAddressHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldOffseterAddress, v))
}

// OffseterAddressHasSuffix applies the HasSuffix predicate on the "offseter_address" field.
func OffseterAddressHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldOffseterAddress, v))
}

// OffseterAddressIsNil applies the IsNil predicate on the "offseter_address" field.
func OffseterAddressIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldOffseterAddress))
}

// OffseterAddressNotNil applies the NotNil predicate on the "offseter_address" field.
func OffseterAddressNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldOffseterAddress))
}

// OffseterAddressEqualFold applies the EqualFold predicate on the "offseter_address" field.
func OffseterAddressEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldOffseterAddress, v))
}

// OffseterAddressContainsFold applies the ContainsFold predicate on the "offseter_address" field.
func OffseterAddressContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldOffseterAddress, v))
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TokensTable, TokensPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.CustomerTokens) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
