// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldSlot holds the string denoting the slot field in the database.
	FieldSlot = "slot"
	// FieldMinterAddress holds the string denoting the minter_address field in the database.
	FieldMinterAddress = "minter_address"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAbi holds the string denoting the abi field in the database.
	FieldAbi = "abi"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldYielderAddress holds the string denoting the yielder_address field in the database.
	FieldYielderAddress = "yielder_address"
	// FieldOffseterAddress holds the string denoting the offseter_address field in the database.
	FieldOffseterAddress = "offseter_address"
	// EdgeTokens holds the string denoting the tokens edge name in mutations.
	EdgeTokens = "tokens"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// TokensTable is the table that holds the tokens relation/edge. The primary key declared below.
	TokensTable = "project_tokens"
	// TokensInverseTable is the table name for the CustomerTokens entity.
	// It exists in this package in order to avoid circular dependency with the "customertokens" package.
	TokensInverseTable = "customer_tokens"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldSlot,
	FieldMinterAddress,
	FieldName,
	FieldAbi,
	FieldImage,
	FieldYielderAddress,
	FieldOffseterAddress,
}

var (
	// TokensPrimaryKey and TokensColumn2 are the table columns denoting the
	// primary key for the tokens relation (M2M).
	TokensPrimaryKey = []string{"project_id", "customer_tokens_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// BySlot orders the results by the slot field.
func BySlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlot, opts...).ToFunc()
}

// ByMinterAddress orders the results by the minter_address field.
func ByMinterAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinterAddress, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByYielderAddress orders the results by the yielder_address field.
func ByYielderAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYielderAddress, opts...).ToFunc()
}

// ByOffseterAddress orders the results by the offseter_address field.
func ByOffseterAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOffseterAddress, opts...).ToFunc()
}

// ByTokensCount orders the results by tokens count.
func ByTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokensStep(), opts...)
	}
}

// ByTokens orders the results by tokens terms.
func ByTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TokensTable, TokensPrimaryKey...),
	)
}
