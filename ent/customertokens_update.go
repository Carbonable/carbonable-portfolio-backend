// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-portfolio-backend/ent/customertokens"
	"github.com/carbonable/carbonable-portfolio-backend/ent/predicate"
	"github.com/carbonable/carbonable-portfolio-backend/ent/project"
)

// CustomerTokensUpdate is the builder for updating CustomerTokens entities.
type CustomerTokensUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerTokensMutation
}

// Where appends a list predicates to the CustomerTokensUpdate builder.
func (ctu *CustomerTokensUpdate) Where(ps ...predicate.CustomerTokens) *CustomerTokensUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetAddress sets the "address" field.
func (ctu *CustomerTokensUpdate) SetAddress(s string) *CustomerTokensUpdate {
	ctu.mutation.SetAddress(s)
	return ctu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ctu *CustomerTokensUpdate) SetNillableAddress(s *string) *CustomerTokensUpdate {
	if s != nil {
		ctu.SetAddress(*s)
	}
	return ctu
}

// SetSlot sets the "slot" field.
func (ctu *CustomerTokensUpdate) SetSlot(i int) *CustomerTokensUpdate {
	ctu.mutation.ResetSlot()
	ctu.mutation.SetSlot(i)
	return ctu
}

// SetNillableSlot sets the "slot" field if the given value is not nil.
func (ctu *CustomerTokensUpdate) SetNillableSlot(i *int) *CustomerTokensUpdate {
	if i != nil {
		ctu.SetSlot(*i)
	}
	return ctu
}

// AddSlot adds i to the "slot" field.
func (ctu *CustomerTokensUpdate) AddSlot(i int) *CustomerTokensUpdate {
	ctu.mutation.AddSlot(i)
	return ctu
}

// SetTokenID sets the "token_id" field.
func (ctu *CustomerTokensUpdate) SetTokenID(s string) *CustomerTokensUpdate {
	ctu.mutation.SetTokenID(s)
	return ctu
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (ctu *CustomerTokensUpdate) SetNillableTokenID(s *string) *CustomerTokensUpdate {
	if s != nil {
		ctu.SetTokenID(*s)
	}
	return ctu
}

// SetValue sets the "value" field.
func (ctu *CustomerTokensUpdate) SetValue(s string) *CustomerTokensUpdate {
	ctu.mutation.SetValue(s)
	return ctu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ctu *CustomerTokensUpdate) SetNillableValue(s *string) *CustomerTokensUpdate {
	if s != nil {
		ctu.SetValue(*s)
	}
	return ctu
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (ctu *CustomerTokensUpdate) AddProjectIDs(ids ...int) *CustomerTokensUpdate {
	ctu.mutation.AddProjectIDs(ids...)
	return ctu
}

// AddProject adds the "project" edges to the Project entity.
func (ctu *CustomerTokensUpdate) AddProject(p ...*Project) *CustomerTokensUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ctu.AddProjectIDs(ids...)
}

// Mutation returns the CustomerTokensMutation object of the builder.
func (ctu *CustomerTokensUpdate) Mutation() *CustomerTokensMutation {
	return ctu.mutation
}

// ClearProject clears all "project" edges to the Project entity.
func (ctu *CustomerTokensUpdate) ClearProject() *CustomerTokensUpdate {
	ctu.mutation.ClearProject()
	return ctu
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (ctu *CustomerTokensUpdate) RemoveProjectIDs(ids ...int) *CustomerTokensUpdate {
	ctu.mutation.RemoveProjectIDs(ids...)
	return ctu
}

// RemoveProject removes "project" edges to Project entities.
func (ctu *CustomerTokensUpdate) RemoveProject(p ...*Project) *CustomerTokensUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ctu.RemoveProjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CustomerTokensUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CustomerTokensUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CustomerTokensUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CustomerTokensUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctu *CustomerTokensUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customertokens.Table, customertokens.Columns, sqlgraph.NewFieldSpec(customertokens.FieldID, field.TypeInt))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.Address(); ok {
		_spec.SetField(customertokens.FieldAddress, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Slot(); ok {
		_spec.SetField(customertokens.FieldSlot, field.TypeInt, value)
	}
	if value, ok := ctu.mutation.AddedSlot(); ok {
		_spec.AddField(customertokens.FieldSlot, field.TypeInt, value)
	}
	if value, ok := ctu.mutation.TokenID(); ok {
		_spec.SetField(customertokens.FieldTokenID, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Value(); ok {
		_spec.SetField(customertokens.FieldValue, field.TypeString, value)
	}
	if ctu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customertokens.ProjectTable,
			Columns: customertokens.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.RemovedProjectIDs(); len(nodes) > 0 && !ctu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customertokens.ProjectTable,
			Columns: customertokens.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customertokens.ProjectTable,
			Columns: customertokens.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customertokens.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CustomerTokensUpdateOne is the builder for updating a single CustomerTokens entity.
type CustomerTokensUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerTokensMutation
}

// SetAddress sets the "address" field.
func (ctuo *CustomerTokensUpdateOne) SetAddress(s string) *CustomerTokensUpdateOne {
	ctuo.mutation.SetAddress(s)
	return ctuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ctuo *CustomerTokensUpdateOne) SetNillableAddress(s *string) *CustomerTokensUpdateOne {
	if s != nil {
		ctuo.SetAddress(*s)
	}
	return ctuo
}

// SetSlot sets the "slot" field.
func (ctuo *CustomerTokensUpdateOne) SetSlot(i int) *CustomerTokensUpdateOne {
	ctuo.mutation.ResetSlot()
	ctuo.mutation.SetSlot(i)
	return ctuo
}

// SetNillableSlot sets the "slot" field if the given value is not nil.
func (ctuo *CustomerTokensUpdateOne) SetNillableSlot(i *int) *CustomerTokensUpdateOne {
	if i != nil {
		ctuo.SetSlot(*i)
	}
	return ctuo
}

// AddSlot adds i to the "slot" field.
func (ctuo *CustomerTokensUpdateOne) AddSlot(i int) *CustomerTokensUpdateOne {
	ctuo.mutation.AddSlot(i)
	return ctuo
}

// SetTokenID sets the "token_id" field.
func (ctuo *CustomerTokensUpdateOne) SetTokenID(s string) *CustomerTokensUpdateOne {
	ctuo.mutation.SetTokenID(s)
	return ctuo
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (ctuo *CustomerTokensUpdateOne) SetNillableTokenID(s *string) *CustomerTokensUpdateOne {
	if s != nil {
		ctuo.SetTokenID(*s)
	}
	return ctuo
}

// SetValue sets the "value" field.
func (ctuo *CustomerTokensUpdateOne) SetValue(s string) *CustomerTokensUpdateOne {
	ctuo.mutation.SetValue(s)
	return ctuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ctuo *CustomerTokensUpdateOne) SetNillableValue(s *string) *CustomerTokensUpdateOne {
	if s != nil {
		ctuo.SetValue(*s)
	}
	return ctuo
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (ctuo *CustomerTokensUpdateOne) AddProjectIDs(ids ...int) *CustomerTokensUpdateOne {
	ctuo.mutation.AddProjectIDs(ids...)
	return ctuo
}

// AddProject adds the "project" edges to the Project entity.
func (ctuo *CustomerTokensUpdateOne) AddProject(p ...*Project) *CustomerTokensUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ctuo.AddProjectIDs(ids...)
}

// Mutation returns the CustomerTokensMutation object of the builder.
func (ctuo *CustomerTokensUpdateOne) Mutation() *CustomerTokensMutation {
	return ctuo.mutation
}

// ClearProject clears all "project" edges to the Project entity.
func (ctuo *CustomerTokensUpdateOne) ClearProject() *CustomerTokensUpdateOne {
	ctuo.mutation.ClearProject()
	return ctuo
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (ctuo *CustomerTokensUpdateOne) RemoveProjectIDs(ids ...int) *CustomerTokensUpdateOne {
	ctuo.mutation.RemoveProjectIDs(ids...)
	return ctuo
}

// RemoveProject removes "project" edges to Project entities.
func (ctuo *CustomerTokensUpdateOne) RemoveProject(p ...*Project) *CustomerTokensUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ctuo.RemoveProjectIDs(ids...)
}

// Where appends a list predicates to the CustomerTokensUpdate builder.
func (ctuo *CustomerTokensUpdateOne) Where(ps ...predicate.CustomerTokens) *CustomerTokensUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CustomerTokensUpdateOne) Select(field string, fields ...string) *CustomerTokensUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CustomerTokens entity.
func (ctuo *CustomerTokensUpdateOne) Save(ctx context.Context) (*CustomerTokens, error) {
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CustomerTokensUpdateOne) SaveX(ctx context.Context) *CustomerTokens {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CustomerTokensUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CustomerTokensUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctuo *CustomerTokensUpdateOne) sqlSave(ctx context.Context) (_node *CustomerTokens, err error) {
	_spec := sqlgraph.NewUpdateSpec(customertokens.Table, customertokens.Columns, sqlgraph.NewFieldSpec(customertokens.FieldID, field.TypeInt))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerTokens.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customertokens.FieldID)
		for _, f := range fields {
			if !customertokens.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customertokens.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.Address(); ok {
		_spec.SetField(customertokens.FieldAddress, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Slot(); ok {
		_spec.SetField(customertokens.FieldSlot, field.TypeInt, value)
	}
	if value, ok := ctuo.mutation.AddedSlot(); ok {
		_spec.AddField(customertokens.FieldSlot, field.TypeInt, value)
	}
	if value, ok := ctuo.mutation.TokenID(); ok {
		_spec.SetField(customertokens.FieldTokenID, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Value(); ok {
		_spec.SetField(customertokens.FieldValue, field.TypeString, value)
	}
	if ctuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customertokens.ProjectTable,
			Columns: customertokens.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.RemovedProjectIDs(); len(nodes) > 0 && !ctuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customertokens.ProjectTable,
			Columns: customertokens.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customertokens.ProjectTable,
			Columns: customertokens.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomerTokens{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customertokens.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
