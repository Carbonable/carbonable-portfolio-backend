// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/carbonable/carbonable-portfolio-backend/ent/customertokens"
	"github.com/carbonable/carbonable-portfolio-backend/ent/predicate"
	"github.com/carbonable/carbonable-portfolio-backend/ent/project"
	"github.com/carbonable/carbonable-portfolio-backend/internal/model"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCustomerTokens = "CustomerTokens"
	TypeProject        = "Project"
)

// CustomerTokensMutation represents an operation that mutates the CustomerTokens nodes in the graph.
type CustomerTokensMutation struct {
	config
	op              Op
	typ             string
	id              *int
	address         *string
	project_address *string
	slot            *int
	addslot         *int
	token_id        *string
	value           *string
	clearedFields   map[string]struct{}
	project         map[int]struct{}
	removedproject  map[int]struct{}
	clearedproject  bool
	done            bool
	oldValue        func(context.Context) (*CustomerTokens, error)
	predicates      []predicate.CustomerTokens
}

var _ ent.Mutation = (*CustomerTokensMutation)(nil)

// customertokensOption allows management of the mutation configuration using functional options.
type customertokensOption func(*CustomerTokensMutation)

// newCustomerTokensMutation creates new mutation for the CustomerTokens entity.
func newCustomerTokensMutation(c config, op Op, opts ...customertokensOption) *CustomerTokensMutation {
	m := &CustomerTokensMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomerTokens,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerTokensID sets the ID field of the mutation.
func withCustomerTokensID(id int) customertokensOption {
	return func(m *CustomerTokensMutation) {
		var (
			err   error
			once  sync.Once
			value *CustomerTokens
		)
		m.oldValue = func(ctx context.Context) (*CustomerTokens, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CustomerTokens.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomerTokens sets the old CustomerTokens of the mutation.
func withCustomerTokens(node *CustomerTokens) customertokensOption {
	return func(m *CustomerTokensMutation) {
		m.oldValue = func(context.Context) (*CustomerTokens, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerTokensMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerTokensMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerTokensMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerTokensMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CustomerTokens.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAddress sets the "address" field.
func (m *CustomerTokensMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *CustomerTokensMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the CustomerTokens entity.
// If the CustomerTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerTokensMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *CustomerTokensMutation) ResetAddress() {
	m.address = nil
}

// SetProjectAddress sets the "project_address" field.
func (m *CustomerTokensMutation) SetProjectAddress(s string) {
	m.project_address = &s
}

// ProjectAddress returns the value of the "project_address" field in the mutation.
func (m *CustomerTokensMutation) ProjectAddress() (r string, exists bool) {
	v := m.project_address
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectAddress returns the old "project_address" field's value of the CustomerTokens entity.
// If the CustomerTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerTokensMutation) OldProjectAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectAddress: %w", err)
	}
	return oldValue.ProjectAddress, nil
}

// ResetProjectAddress resets all changes to the "project_address" field.
func (m *CustomerTokensMutation) ResetProjectAddress() {
	m.project_address = nil
}

// SetSlot sets the "slot" field.
func (m *CustomerTokensMutation) SetSlot(i int) {
	m.slot = &i
	m.addslot = nil
}

// Slot returns the value of the "slot" field in the mutation.
func (m *CustomerTokensMutation) Slot() (r int, exists bool) {
	v := m.slot
	if v == nil {
		return
	}
	return *v, true
}

// OldSlot returns the old "slot" field's value of the CustomerTokens entity.
// If the CustomerTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerTokensMutation) OldSlot(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlot: %w", err)
	}
	return oldValue.Slot, nil
}

// AddSlot adds i to the "slot" field.
func (m *CustomerTokensMutation) AddSlot(i int) {
	if m.addslot != nil {
		*m.addslot += i
	} else {
		m.addslot = &i
	}
}

// AddedSlot returns the value that was added to the "slot" field in this mutation.
func (m *CustomerTokensMutation) AddedSlot() (r int, exists bool) {
	v := m.addslot
	if v == nil {
		return
	}
	return *v, true
}

// ResetSlot resets all changes to the "slot" field.
func (m *CustomerTokensMutation) ResetSlot() {
	m.slot = nil
	m.addslot = nil
}

// SetTokenID sets the "token_id" field.
func (m *CustomerTokensMutation) SetTokenID(s string) {
	m.token_id = &s
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *CustomerTokensMutation) TokenID() (r string, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the CustomerTokens entity.
// If the CustomerTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerTokensMutation) OldTokenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *CustomerTokensMutation) ResetTokenID() {
	m.token_id = nil
}

// SetValue sets the "value" field.
func (m *CustomerTokensMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *CustomerTokensMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the CustomerTokens entity.
// If the CustomerTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerTokensMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *CustomerTokensMutation) ResetValue() {
	m.value = nil
}

// AddProjectIDs adds the "project" edge to the Project entity by ids.
func (m *CustomerTokensMutation) AddProjectIDs(ids ...int) {
	if m.project == nil {
		m.project = make(map[int]struct{})
	}
	for i := range ids {
		m.project[ids[i]] = struct{}{}
	}
}

// ClearProject clears the "project" edge to the Project entity.
func (m *CustomerTokensMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *CustomerTokensMutation) ProjectCleared() bool {
	return m.clearedproject
}

// RemoveProjectIDs removes the "project" edge to the Project entity by IDs.
func (m *CustomerTokensMutation) RemoveProjectIDs(ids ...int) {
	if m.removedproject == nil {
		m.removedproject = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.project, ids[i])
		m.removedproject[ids[i]] = struct{}{}
	}
}

// RemovedProject returns the removed IDs of the "project" edge to the Project entity.
func (m *CustomerTokensMutation) RemovedProjectIDs() (ids []int) {
	for id := range m.removedproject {
		ids = append(ids, id)
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
func (m *CustomerTokensMutation) ProjectIDs() (ids []int) {
	for id := range m.project {
		ids = append(ids, id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *CustomerTokensMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
	m.removedproject = nil
}

// Where appends a list predicates to the CustomerTokensMutation builder.
func (m *CustomerTokensMutation) Where(ps ...predicate.CustomerTokens) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerTokensMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerTokensMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CustomerTokens, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerTokensMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerTokensMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CustomerTokens).
func (m *CustomerTokensMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerTokensMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.address != nil {
		fields = append(fields, customertokens.FieldAddress)
	}
	if m.project_address != nil {
		fields = append(fields, customertokens.FieldProjectAddress)
	}
	if m.slot != nil {
		fields = append(fields, customertokens.FieldSlot)
	}
	if m.token_id != nil {
		fields = append(fields, customertokens.FieldTokenID)
	}
	if m.value != nil {
		fields = append(fields, customertokens.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerTokensMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customertokens.FieldAddress:
		return m.Address()
	case customertokens.FieldProjectAddress:
		return m.ProjectAddress()
	case customertokens.FieldSlot:
		return m.Slot()
	case customertokens.FieldTokenID:
		return m.TokenID()
	case customertokens.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerTokensMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customertokens.FieldAddress:
		return m.OldAddress(ctx)
	case customertokens.FieldProjectAddress:
		return m.OldProjectAddress(ctx)
	case customertokens.FieldSlot:
		return m.OldSlot(ctx)
	case customertokens.FieldTokenID:
		return m.OldTokenID(ctx)
	case customertokens.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown CustomerTokens field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerTokensMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customertokens.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case customertokens.FieldProjectAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectAddress(v)
		return nil
	case customertokens.FieldSlot:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlot(v)
		return nil
	case customertokens.FieldTokenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case customertokens.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown CustomerTokens field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerTokensMutation) AddedFields() []string {
	var fields []string
	if m.addslot != nil {
		fields = append(fields, customertokens.FieldSlot)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerTokensMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case customertokens.FieldSlot:
		return m.AddedSlot()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerTokensMutation) AddField(name string, value ent.Value) error {
	switch name {
	case customertokens.FieldSlot:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSlot(v)
		return nil
	}
	return fmt.Errorf("unknown CustomerTokens numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerTokensMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerTokensMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerTokensMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CustomerTokens nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerTokensMutation) ResetField(name string) error {
	switch name {
	case customertokens.FieldAddress:
		m.ResetAddress()
		return nil
	case customertokens.FieldProjectAddress:
		m.ResetProjectAddress()
		return nil
	case customertokens.FieldSlot:
		m.ResetSlot()
		return nil
	case customertokens.FieldTokenID:
		m.ResetTokenID()
		return nil
	case customertokens.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown CustomerTokens field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerTokensMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, customertokens.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerTokensMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customertokens.EdgeProject:
		ids := make([]ent.Value, 0, len(m.project))
		for id := range m.project {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerTokensMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproject != nil {
		edges = append(edges, customertokens.EdgeProject)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerTokensMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customertokens.EdgeProject:
		ids := make([]ent.Value, 0, len(m.removedproject))
		for id := range m.removedproject {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerTokensMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, customertokens.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerTokensMutation) EdgeCleared(name string) bool {
	switch name {
	case customertokens.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerTokensMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CustomerTokens unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerTokensMutation) ResetEdge(name string) error {
	switch name {
	case customertokens.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown CustomerTokens edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op               Op
	typ              string
	id               *int
	address          *string
	slot             *int
	addslot          *int
	minter_address   *string
	name             *string
	abi              *model.ProjectAbi
	slot_uri         *model.SlotUri
	image            *string
	yielder_address  *string
	offseter_address *string
	clearedFields    map[string]struct{}
	tokens           map[int]struct{}
	removedtokens    map[int]struct{}
	clearedtokens    bool
	done             bool
	oldValue         func(context.Context) (*Project, error)
	predicates       []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id int) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAddress sets the "address" field.
func (m *ProjectMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ProjectMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ProjectMutation) ResetAddress() {
	m.address = nil
}

// SetSlot sets the "slot" field.
func (m *ProjectMutation) SetSlot(i int) {
	m.slot = &i
	m.addslot = nil
}

// Slot returns the value of the "slot" field in the mutation.
func (m *ProjectMutation) Slot() (r int, exists bool) {
	v := m.slot
	if v == nil {
		return
	}
	return *v, true
}

// OldSlot returns the old "slot" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldSlot(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlot: %w", err)
	}
	return oldValue.Slot, nil
}

// AddSlot adds i to the "slot" field.
func (m *ProjectMutation) AddSlot(i int) {
	if m.addslot != nil {
		*m.addslot += i
	} else {
		m.addslot = &i
	}
}

// AddedSlot returns the value that was added to the "slot" field in this mutation.
func (m *ProjectMutation) AddedSlot() (r int, exists bool) {
	v := m.addslot
	if v == nil {
		return
	}
	return *v, true
}

// ResetSlot resets all changes to the "slot" field.
func (m *ProjectMutation) ResetSlot() {
	m.slot = nil
	m.addslot = nil
}

// SetMinterAddress sets the "minter_address" field.
func (m *ProjectMutation) SetMinterAddress(s string) {
	m.minter_address = &s
}

// MinterAddress returns the value of the "minter_address" field in the mutation.
func (m *ProjectMutation) MinterAddress() (r string, exists bool) {
	v := m.minter_address
	if v == nil {
		return
	}
	return *v, true
}

// OldMinterAddress returns the old "minter_address" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldMinterAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinterAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinterAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinterAddress: %w", err)
	}
	return oldValue.MinterAddress, nil
}

// ResetMinterAddress resets all changes to the "minter_address" field.
func (m *ProjectMutation) ResetMinterAddress() {
	m.minter_address = nil
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetAbi sets the "abi" field.
func (m *ProjectMutation) SetAbi(ma model.ProjectAbi) {
	m.abi = &ma
}

// Abi returns the value of the "abi" field in the mutation.
func (m *ProjectMutation) Abi() (r model.ProjectAbi, exists bool) {
	v := m.abi
	if v == nil {
		return
	}
	return *v, true
}

// OldAbi returns the old "abi" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAbi(ctx context.Context) (v model.ProjectAbi, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbi is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbi requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbi: %w", err)
	}
	return oldValue.Abi, nil
}

// ResetAbi resets all changes to the "abi" field.
func (m *ProjectMutation) ResetAbi() {
	m.abi = nil
}

// SetSlotURI sets the "slot_uri" field.
func (m *ProjectMutation) SetSlotURI(mu model.SlotUri) {
	m.slot_uri = &mu
}

// SlotURI returns the value of the "slot_uri" field in the mutation.
func (m *ProjectMutation) SlotURI() (r model.SlotUri, exists bool) {
	v := m.slot_uri
	if v == nil {
		return
	}
	return *v, true
}

// OldSlotURI returns the old "slot_uri" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldSlotURI(ctx context.Context) (v model.SlotUri, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlotURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlotURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlotURI: %w", err)
	}
	return oldValue.SlotURI, nil
}

// ResetSlotURI resets all changes to the "slot_uri" field.
func (m *ProjectMutation) ResetSlotURI() {
	m.slot_uri = nil
}

// SetImage sets the "image" field.
func (m *ProjectMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ProjectMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ProjectMutation) ResetImage() {
	m.image = nil
}

// SetYielderAddress sets the "yielder_address" field.
func (m *ProjectMutation) SetYielderAddress(s string) {
	m.yielder_address = &s
}

// YielderAddress returns the value of the "yielder_address" field in the mutation.
func (m *ProjectMutation) YielderAddress() (r string, exists bool) {
	v := m.yielder_address
	if v == nil {
		return
	}
	return *v, true
}

// OldYielderAddress returns the old "yielder_address" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldYielderAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYielderAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYielderAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYielderAddress: %w", err)
	}
	return oldValue.YielderAddress, nil
}

// ClearYielderAddress clears the value of the "yielder_address" field.
func (m *ProjectMutation) ClearYielderAddress() {
	m.yielder_address = nil
	m.clearedFields[project.FieldYielderAddress] = struct{}{}
}

// YielderAddressCleared returns if the "yielder_address" field was cleared in this mutation.
func (m *ProjectMutation) YielderAddressCleared() bool {
	_, ok := m.clearedFields[project.FieldYielderAddress]
	return ok
}

// ResetYielderAddress resets all changes to the "yielder_address" field.
func (m *ProjectMutation) ResetYielderAddress() {
	m.yielder_address = nil
	delete(m.clearedFields, project.FieldYielderAddress)
}

// SetOffseterAddress sets the "offseter_address" field.
func (m *ProjectMutation) SetOffseterAddress(s string) {
	m.offseter_address = &s
}

// OffseterAddress returns the value of the "offseter_address" field in the mutation.
func (m *ProjectMutation) OffseterAddress() (r string, exists bool) {
	v := m.offseter_address
	if v == nil {
		return
	}
	return *v, true
}

// OldOffseterAddress returns the old "offseter_address" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldOffseterAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOffseterAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOffseterAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOffseterAddress: %w", err)
	}
	return oldValue.OffseterAddress, nil
}

// ClearOffseterAddress clears the value of the "offseter_address" field.
func (m *ProjectMutation) ClearOffseterAddress() {
	m.offseter_address = nil
	m.clearedFields[project.FieldOffseterAddress] = struct{}{}
}

// OffseterAddressCleared returns if the "offseter_address" field was cleared in this mutation.
func (m *ProjectMutation) OffseterAddressCleared() bool {
	_, ok := m.clearedFields[project.FieldOffseterAddress]
	return ok
}

// ResetOffseterAddress resets all changes to the "offseter_address" field.
func (m *ProjectMutation) ResetOffseterAddress() {
	m.offseter_address = nil
	delete(m.clearedFields, project.FieldOffseterAddress)
}

// AddTokenIDs adds the "tokens" edge to the CustomerTokens entity by ids.
func (m *ProjectMutation) AddTokenIDs(ids ...int) {
	if m.tokens == nil {
		m.tokens = make(map[int]struct{})
	}
	for i := range ids {
		m.tokens[ids[i]] = struct{}{}
	}
}

// ClearTokens clears the "tokens" edge to the CustomerTokens entity.
func (m *ProjectMutation) ClearTokens() {
	m.clearedtokens = true
}

// TokensCleared reports if the "tokens" edge to the CustomerTokens entity was cleared.
func (m *ProjectMutation) TokensCleared() bool {
	return m.clearedtokens
}

// RemoveTokenIDs removes the "tokens" edge to the CustomerTokens entity by IDs.
func (m *ProjectMutation) RemoveTokenIDs(ids ...int) {
	if m.removedtokens == nil {
		m.removedtokens = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tokens, ids[i])
		m.removedtokens[ids[i]] = struct{}{}
	}
}

// RemovedTokens returns the removed IDs of the "tokens" edge to the CustomerTokens entity.
func (m *ProjectMutation) RemovedTokensIDs() (ids []int) {
	for id := range m.removedtokens {
		ids = append(ids, id)
	}
	return
}

// TokensIDs returns the "tokens" edge IDs in the mutation.
func (m *ProjectMutation) TokensIDs() (ids []int) {
	for id := range m.tokens {
		ids = append(ids, id)
	}
	return
}

// ResetTokens resets all changes to the "tokens" edge.
func (m *ProjectMutation) ResetTokens() {
	m.tokens = nil
	m.clearedtokens = false
	m.removedtokens = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.address != nil {
		fields = append(fields, project.FieldAddress)
	}
	if m.slot != nil {
		fields = append(fields, project.FieldSlot)
	}
	if m.minter_address != nil {
		fields = append(fields, project.FieldMinterAddress)
	}
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.abi != nil {
		fields = append(fields, project.FieldAbi)
	}
	if m.slot_uri != nil {
		fields = append(fields, project.FieldSlotURI)
	}
	if m.image != nil {
		fields = append(fields, project.FieldImage)
	}
	if m.yielder_address != nil {
		fields = append(fields, project.FieldYielderAddress)
	}
	if m.offseter_address != nil {
		fields = append(fields, project.FieldOffseterAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldAddress:
		return m.Address()
	case project.FieldSlot:
		return m.Slot()
	case project.FieldMinterAddress:
		return m.MinterAddress()
	case project.FieldName:
		return m.Name()
	case project.FieldAbi:
		return m.Abi()
	case project.FieldSlotURI:
		return m.SlotURI()
	case project.FieldImage:
		return m.Image()
	case project.FieldYielderAddress:
		return m.YielderAddress()
	case project.FieldOffseterAddress:
		return m.OffseterAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldAddress:
		return m.OldAddress(ctx)
	case project.FieldSlot:
		return m.OldSlot(ctx)
	case project.FieldMinterAddress:
		return m.OldMinterAddress(ctx)
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldAbi:
		return m.OldAbi(ctx)
	case project.FieldSlotURI:
		return m.OldSlotURI(ctx)
	case project.FieldImage:
		return m.OldImage(ctx)
	case project.FieldYielderAddress:
		return m.OldYielderAddress(ctx)
	case project.FieldOffseterAddress:
		return m.OldOffseterAddress(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case project.FieldSlot:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlot(v)
		return nil
	case project.FieldMinterAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinterAddress(v)
		return nil
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldAbi:
		v, ok := value.(model.ProjectAbi)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbi(v)
		return nil
	case project.FieldSlotURI:
		v, ok := value.(model.SlotUri)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlotURI(v)
		return nil
	case project.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case project.FieldYielderAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYielderAddress(v)
		return nil
	case project.FieldOffseterAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOffseterAddress(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	var fields []string
	if m.addslot != nil {
		fields = append(fields, project.FieldSlot)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case project.FieldSlot:
		return m.AddedSlot()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case project.FieldSlot:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSlot(v)
		return nil
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldYielderAddress) {
		fields = append(fields, project.FieldYielderAddress)
	}
	if m.FieldCleared(project.FieldOffseterAddress) {
		fields = append(fields, project.FieldOffseterAddress)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldYielderAddress:
		m.ClearYielderAddress()
		return nil
	case project.FieldOffseterAddress:
		m.ClearOffseterAddress()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldAddress:
		m.ResetAddress()
		return nil
	case project.FieldSlot:
		m.ResetSlot()
		return nil
	case project.FieldMinterAddress:
		m.ResetMinterAddress()
		return nil
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldAbi:
		m.ResetAbi()
		return nil
	case project.FieldSlotURI:
		m.ResetSlotURI()
		return nil
	case project.FieldImage:
		m.ResetImage()
		return nil
	case project.FieldYielderAddress:
		m.ResetYielderAddress()
		return nil
	case project.FieldOffseterAddress:
		m.ResetOffseterAddress()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tokens != nil {
		edges = append(edges, project.EdgeTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.tokens))
		for id := range m.tokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtokens != nil {
		edges = append(edges, project.EdgeTokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.removedtokens))
		for id := range m.removedtokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtokens {
		edges = append(edges, project.EdgeTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeTokens:
		return m.clearedtokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeTokens:
		m.ResetTokens()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}
