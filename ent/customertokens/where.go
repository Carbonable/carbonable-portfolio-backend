// Code generated by ent, DO NOT EDIT.

package customertokens

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/carbonable/carbonable-portfolio-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLTE(FieldID, id))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldAddress, v))
}

// ProjectAddress applies equality check predicate on the "project_address" field. It's identical to ProjectAddressEQ.
func ProjectAddress(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldProjectAddress, v))
}

// Slot applies equality check predicate on the "slot" field. It's identical to SlotEQ.
func Slot(v int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldSlot, v))
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldTokenID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldValue, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldContainsFold(FieldAddress, v))
}

// ProjectAddressEQ applies the EQ predicate on the "project_address" field.
func ProjectAddressEQ(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldProjectAddress, v))
}

// ProjectAddressNEQ applies the NEQ predicate on the "project_address" field.
func ProjectAddressNEQ(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNEQ(FieldProjectAddress, v))
}

// ProjectAddressIn applies the In predicate on the "project_address" field.
func ProjectAddressIn(vs ...string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldIn(FieldProjectAddress, vs...))
}

// ProjectAddressNotIn applies the NotIn predicate on the "project_address" field.
func ProjectAddressNotIn(vs ...string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNotIn(FieldProjectAddress, vs...))
}

// ProjectAddressGT applies the GT predicate on the "project_address" field.
func ProjectAddressGT(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGT(FieldProjectAddress, v))
}

// ProjectAddressGTE applies the GTE predicate on the "project_address" field.
func ProjectAddressGTE(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGTE(FieldProjectAddress, v))
}

// ProjectAddressLT applies the LT predicate on the "project_address" field.
func ProjectAddressLT(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLT(FieldProjectAddress, v))
}

// ProjectAddressLTE applies the LTE predicate on the "project_address" field.
func ProjectAddressLTE(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLTE(FieldProjectAddress, v))
}

// ProjectAddressContains applies the Contains predicate on the "project_address" field.
func ProjectAddressContains(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldContains(FieldProjectAddress, v))
}

// ProjectAddressHasPrefix applies the HasPrefix predicate on the "project_address" field.
func ProjectAddressHasPrefix(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldHasPrefix(FieldProjectAddress, v))
}

// ProjectAddressHasSuffix applies the HasSuffix predicate on the "project_address" field.
func ProjectAddressHasSuffix(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldHasSuffix(FieldProjectAddress, v))
}

// ProjectAddressEqualFold applies the EqualFold predicate on the "project_address" field.
func ProjectAddressEqualFold(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEqualFold(FieldProjectAddress, v))
}

// ProjectAddressContainsFold applies the ContainsFold predicate on the "project_address" field.
func ProjectAddressContainsFold(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldContainsFold(FieldProjectAddress, v))
}

// SlotEQ applies the EQ predicate on the "slot" field.
func SlotEQ(v int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldSlot, v))
}

// SlotNEQ applies the NEQ predicate on the "slot" field.
func SlotNEQ(v int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNEQ(FieldSlot, v))
}

// SlotIn applies the In predicate on the "slot" field.
func SlotIn(vs ...int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldIn(FieldSlot, vs...))
}

// SlotNotIn applies the NotIn predicate on the "slot" field.
func SlotNotIn(vs ...int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNotIn(FieldSlot, vs...))
}

// SlotGT applies the GT predicate on the "slot" field.
func SlotGT(v int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGT(FieldSlot, v))
}

// SlotGTE applies the GTE predicate on the "slot" field.
func SlotGTE(v int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGTE(FieldSlot, v))
}

// SlotLT applies the LT predicate on the "slot" field.
func SlotLT(v int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLT(FieldSlot, v))
}

// SlotLTE applies the LTE predicate on the "slot" field.
func SlotLTE(v int) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLTE(FieldSlot, v))
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldTokenID, v))
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNEQ(FieldTokenID, v))
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldIn(FieldTokenID, vs...))
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNotIn(FieldTokenID, vs...))
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGT(FieldTokenID, v))
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGTE(FieldTokenID, v))
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLT(FieldTokenID, v))
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLTE(FieldTokenID, v))
}

// TokenIDContains applies the Contains predicate on the "token_id" field.
func TokenIDContains(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldContains(FieldTokenID, v))
}

// TokenIDHasPrefix applies the HasPrefix predicate on the "token_id" field.
func TokenIDHasPrefix(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldHasPrefix(FieldTokenID, v))
}

// TokenIDHasSuffix applies the HasSuffix predicate on the "token_id" field.
func TokenIDHasSuffix(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldHasSuffix(FieldTokenID, v))
}

// TokenIDEqualFold applies the EqualFold predicate on the "token_id" field.
func TokenIDEqualFold(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEqualFold(FieldTokenID, v))
}

// TokenIDContainsFold applies the ContainsFold predicate on the "token_id" field.
func TokenIDContainsFold(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldContainsFold(FieldTokenID, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.FieldContainsFold(FieldValue, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.CustomerTokens {
	return predicate.CustomerTokens(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProjectTable, ProjectPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.CustomerTokens {
	return predicate.CustomerTokens(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerTokens) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerTokens) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerTokens) predicate.CustomerTokens {
	return predicate.CustomerTokens(sql.NotPredicates(p))
}
