// Code generated by ent, DO NOT EDIT.

package customertokens

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the customertokens type in the database.
	Label = "customer_tokens"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldProjectAddress holds the string denoting the project_address field in the database.
	FieldProjectAddress = "project_address"
	// FieldSlot holds the string denoting the slot field in the database.
	FieldSlot = "slot"
	// FieldTokenID holds the string denoting the token_id field in the database.
	FieldTokenID = "token_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the customertokens in the database.
	Table = "customer_tokens"
	// ProjectTable is the table that holds the project relation/edge. The primary key declared below.
	ProjectTable = "project_tokens"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
)

// Columns holds all SQL columns for customertokens fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldProjectAddress,
	FieldSlot,
	FieldTokenID,
	FieldValue,
}

var (
	// ProjectPrimaryKey and ProjectColumn2 are the table columns denoting the
	// primary key for the project relation (M2M).
	ProjectPrimaryKey = []string{"project_id", "customer_tokens_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CustomerTokens queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByProjectAddress orders the results by the project_address field.
func ByProjectAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectAddress, opts...).ToFunc()
}

// BySlot orders the results by the slot field.
func BySlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlot, opts...).ToFunc()
}

// ByTokenID orders the results by the token_id field.
func ByTokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByProjectCount orders the results by project count.
func ByProjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectStep(), opts...)
	}
}

// ByProject orders the results by project terms.
func ByProject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProjectTable, ProjectPrimaryKey...),
	)
}
