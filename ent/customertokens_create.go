// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-portfolio-backend/ent/customertokens"
	"github.com/carbonable/carbonable-portfolio-backend/ent/project"
)

// CustomerTokensCreate is the builder for creating a CustomerTokens entity.
type CustomerTokensCreate struct {
	config
	mutation *CustomerTokensMutation
	hooks    []Hook
}

// SetAddress sets the "address" field.
func (ctc *CustomerTokensCreate) SetAddress(s string) *CustomerTokensCreate {
	ctc.mutation.SetAddress(s)
	return ctc
}

// SetProjectAddress sets the "project_address" field.
func (ctc *CustomerTokensCreate) SetProjectAddress(s string) *CustomerTokensCreate {
	ctc.mutation.SetProjectAddress(s)
	return ctc
}

// SetSlot sets the "slot" field.
func (ctc *CustomerTokensCreate) SetSlot(i int) *CustomerTokensCreate {
	ctc.mutation.SetSlot(i)
	return ctc
}

// SetTokenID sets the "token_id" field.
func (ctc *CustomerTokensCreate) SetTokenID(s string) *CustomerTokensCreate {
	ctc.mutation.SetTokenID(s)
	return ctc
}

// SetValue sets the "value" field.
func (ctc *CustomerTokensCreate) SetValue(s string) *CustomerTokensCreate {
	ctc.mutation.SetValue(s)
	return ctc
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (ctc *CustomerTokensCreate) AddProjectIDs(ids ...int) *CustomerTokensCreate {
	ctc.mutation.AddProjectIDs(ids...)
	return ctc
}

// AddProject adds the "project" edges to the Project entity.
func (ctc *CustomerTokensCreate) AddProject(p ...*Project) *CustomerTokensCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ctc.AddProjectIDs(ids...)
}

// Mutation returns the CustomerTokensMutation object of the builder.
func (ctc *CustomerTokensCreate) Mutation() *CustomerTokensMutation {
	return ctc.mutation
}

// Save creates the CustomerTokens in the database.
func (ctc *CustomerTokensCreate) Save(ctx context.Context) (*CustomerTokens, error) {
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CustomerTokensCreate) SaveX(ctx context.Context) *CustomerTokens {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CustomerTokensCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CustomerTokensCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CustomerTokensCreate) check() error {
	if _, ok := ctc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "CustomerTokens.address"`)}
	}
	if _, ok := ctc.mutation.ProjectAddress(); !ok {
		return &ValidationError{Name: "project_address", err: errors.New(`ent: missing required field "CustomerTokens.project_address"`)}
	}
	if _, ok := ctc.mutation.Slot(); !ok {
		return &ValidationError{Name: "slot", err: errors.New(`ent: missing required field "CustomerTokens.slot"`)}
	}
	if _, ok := ctc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "CustomerTokens.token_id"`)}
	}
	if _, ok := ctc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "CustomerTokens.value"`)}
	}
	return nil
}

func (ctc *CustomerTokensCreate) sqlSave(ctx context.Context) (*CustomerTokens, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CustomerTokensCreate) createSpec() (*CustomerTokens, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerTokens{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(customertokens.Table, sqlgraph.NewFieldSpec(customertokens.FieldID, field.TypeInt))
	)
	if value, ok := ctc.mutation.Address(); ok {
		_spec.SetField(customertokens.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ctc.mutation.ProjectAddress(); ok {
		_spec.SetField(customertokens.FieldProjectAddress, field.TypeString, value)
		_node.ProjectAddress = value
	}
	if value, ok := ctc.mutation.Slot(); ok {
		_spec.SetField(customertokens.FieldSlot, field.TypeInt, value)
		_node.Slot = value
	}
	if value, ok := ctc.mutation.TokenID(); ok {
		_spec.SetField(customertokens.FieldTokenID, field.TypeString, value)
		_node.TokenID = value
	}
	if value, ok := ctc.mutation.Value(); ok {
		_spec.SetField(customertokens.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := ctc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customertokens.ProjectTable,
			Columns: customertokens.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerTokensCreateBulk is the builder for creating many CustomerTokens entities in bulk.
type CustomerTokensCreateBulk struct {
	config
	err      error
	builders []*CustomerTokensCreate
}

// Save creates the CustomerTokens entities in the database.
func (ctcb *CustomerTokensCreateBulk) Save(ctx context.Context) ([]*CustomerTokens, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CustomerTokens, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerTokensMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CustomerTokensCreateBulk) SaveX(ctx context.Context) []*CustomerTokens {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CustomerTokensCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CustomerTokensCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
