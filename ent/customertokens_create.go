// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-portfolio-backend/ent/customertokens"
	"github.com/carbonable/carbonable-portfolio-backend/ent/project"
)

// CustomerTokensCreate is the builder for creating a CustomerTokens entity.
type CustomerTokensCreate struct {
	config
	mutation *CustomerTokensMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAddress sets the "address" field.
func (ctc *CustomerTokensCreate) SetAddress(s string) *CustomerTokensCreate {
	ctc.mutation.SetAddress(s)
	return ctc
}

// SetProjectAddress sets the "project_address" field.
func (ctc *CustomerTokensCreate) SetProjectAddress(s string) *CustomerTokensCreate {
	ctc.mutation.SetProjectAddress(s)
	return ctc
}

// SetSlot sets the "slot" field.
func (ctc *CustomerTokensCreate) SetSlot(i int) *CustomerTokensCreate {
	ctc.mutation.SetSlot(i)
	return ctc
}

// SetTokenID sets the "token_id" field.
func (ctc *CustomerTokensCreate) SetTokenID(s string) *CustomerTokensCreate {
	ctc.mutation.SetTokenID(s)
	return ctc
}

// SetValue sets the "value" field.
func (ctc *CustomerTokensCreate) SetValue(s string) *CustomerTokensCreate {
	ctc.mutation.SetValue(s)
	return ctc
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (ctc *CustomerTokensCreate) AddProjectIDs(ids ...int) *CustomerTokensCreate {
	ctc.mutation.AddProjectIDs(ids...)
	return ctc
}

// AddProject adds the "project" edges to the Project entity.
func (ctc *CustomerTokensCreate) AddProject(p ...*Project) *CustomerTokensCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ctc.AddProjectIDs(ids...)
}

// Mutation returns the CustomerTokensMutation object of the builder.
func (ctc *CustomerTokensCreate) Mutation() *CustomerTokensMutation {
	return ctc.mutation
}

// Save creates the CustomerTokens in the database.
func (ctc *CustomerTokensCreate) Save(ctx context.Context) (*CustomerTokens, error) {
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CustomerTokensCreate) SaveX(ctx context.Context) *CustomerTokens {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CustomerTokensCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CustomerTokensCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CustomerTokensCreate) check() error {
	if _, ok := ctc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "CustomerTokens.address"`)}
	}
	if _, ok := ctc.mutation.ProjectAddress(); !ok {
		return &ValidationError{Name: "project_address", err: errors.New(`ent: missing required field "CustomerTokens.project_address"`)}
	}
	if _, ok := ctc.mutation.Slot(); !ok {
		return &ValidationError{Name: "slot", err: errors.New(`ent: missing required field "CustomerTokens.slot"`)}
	}
	if _, ok := ctc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "CustomerTokens.token_id"`)}
	}
	if _, ok := ctc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "CustomerTokens.value"`)}
	}
	return nil
}

func (ctc *CustomerTokensCreate) sqlSave(ctx context.Context) (*CustomerTokens, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CustomerTokensCreate) createSpec() (*CustomerTokens, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerTokens{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(customertokens.Table, sqlgraph.NewFieldSpec(customertokens.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ctc.conflict
	if value, ok := ctc.mutation.Address(); ok {
		_spec.SetField(customertokens.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ctc.mutation.ProjectAddress(); ok {
		_spec.SetField(customertokens.FieldProjectAddress, field.TypeString, value)
		_node.ProjectAddress = value
	}
	if value, ok := ctc.mutation.Slot(); ok {
		_spec.SetField(customertokens.FieldSlot, field.TypeInt, value)
		_node.Slot = value
	}
	if value, ok := ctc.mutation.TokenID(); ok {
		_spec.SetField(customertokens.FieldTokenID, field.TypeString, value)
		_node.TokenID = value
	}
	if value, ok := ctc.mutation.Value(); ok {
		_spec.SetField(customertokens.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := ctc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customertokens.ProjectTable,
			Columns: customertokens.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerTokens.Create().
//		SetAddress(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerTokensUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
func (ctc *CustomerTokensCreate) OnConflict(opts ...sql.ConflictOption) *CustomerTokensUpsertOne {
	ctc.conflict = opts
	return &CustomerTokensUpsertOne{
		create: ctc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerTokens.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctc *CustomerTokensCreate) OnConflictColumns(columns ...string) *CustomerTokensUpsertOne {
	ctc.conflict = append(ctc.conflict, sql.ConflictColumns(columns...))
	return &CustomerTokensUpsertOne{
		create: ctc,
	}
}

type (
	// CustomerTokensUpsertOne is the builder for "upsert"-ing
	//  one CustomerTokens node.
	CustomerTokensUpsertOne struct {
		create *CustomerTokensCreate
	}

	// CustomerTokensUpsert is the "OnConflict" setter.
	CustomerTokensUpsert struct {
		*sql.UpdateSet
	}
)

// SetAddress sets the "address" field.
func (u *CustomerTokensUpsert) SetAddress(v string) *CustomerTokensUpsert {
	u.Set(customertokens.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CustomerTokensUpsert) UpdateAddress() *CustomerTokensUpsert {
	u.SetExcluded(customertokens.FieldAddress)
	return u
}

// SetProjectAddress sets the "project_address" field.
func (u *CustomerTokensUpsert) SetProjectAddress(v string) *CustomerTokensUpsert {
	u.Set(customertokens.FieldProjectAddress, v)
	return u
}

// UpdateProjectAddress sets the "project_address" field to the value that was provided on create.
func (u *CustomerTokensUpsert) UpdateProjectAddress() *CustomerTokensUpsert {
	u.SetExcluded(customertokens.FieldProjectAddress)
	return u
}

// SetSlot sets the "slot" field.
func (u *CustomerTokensUpsert) SetSlot(v int) *CustomerTokensUpsert {
	u.Set(customertokens.FieldSlot, v)
	return u
}

// UpdateSlot sets the "slot" field to the value that was provided on create.
func (u *CustomerTokensUpsert) UpdateSlot() *CustomerTokensUpsert {
	u.SetExcluded(customertokens.FieldSlot)
	return u
}

// AddSlot adds v to the "slot" field.
func (u *CustomerTokensUpsert) AddSlot(v int) *CustomerTokensUpsert {
	u.Add(customertokens.FieldSlot, v)
	return u
}

// SetTokenID sets the "token_id" field.
func (u *CustomerTokensUpsert) SetTokenID(v string) *CustomerTokensUpsert {
	u.Set(customertokens.FieldTokenID, v)
	return u
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *CustomerTokensUpsert) UpdateTokenID() *CustomerTokensUpsert {
	u.SetExcluded(customertokens.FieldTokenID)
	return u
}

// SetValue sets the "value" field.
func (u *CustomerTokensUpsert) SetValue(v string) *CustomerTokensUpsert {
	u.Set(customertokens.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CustomerTokensUpsert) UpdateValue() *CustomerTokensUpsert {
	u.SetExcluded(customertokens.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CustomerTokens.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerTokensUpsertOne) UpdateNewValues() *CustomerTokensUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerTokens.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerTokensUpsertOne) Ignore() *CustomerTokensUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerTokensUpsertOne) DoNothing() *CustomerTokensUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerTokensCreate.OnConflict
// documentation for more info.
func (u *CustomerTokensUpsertOne) Update(set func(*CustomerTokensUpsert)) *CustomerTokensUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerTokensUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *CustomerTokensUpsertOne) SetAddress(v string) *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CustomerTokensUpsertOne) UpdateAddress() *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateAddress()
	})
}

// SetProjectAddress sets the "project_address" field.
func (u *CustomerTokensUpsertOne) SetProjectAddress(v string) *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetProjectAddress(v)
	})
}

// UpdateProjectAddress sets the "project_address" field to the value that was provided on create.
func (u *CustomerTokensUpsertOne) UpdateProjectAddress() *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateProjectAddress()
	})
}

// SetSlot sets the "slot" field.
func (u *CustomerTokensUpsertOne) SetSlot(v int) *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetSlot(v)
	})
}

// AddSlot adds v to the "slot" field.
func (u *CustomerTokensUpsertOne) AddSlot(v int) *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.AddSlot(v)
	})
}

// UpdateSlot sets the "slot" field to the value that was provided on create.
func (u *CustomerTokensUpsertOne) UpdateSlot() *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateSlot()
	})
}

// SetTokenID sets the "token_id" field.
func (u *CustomerTokensUpsertOne) SetTokenID(v string) *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *CustomerTokensUpsertOne) UpdateTokenID() *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateTokenID()
	})
}

// SetValue sets the "value" field.
func (u *CustomerTokensUpsertOne) SetValue(v string) *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CustomerTokensUpsertOne) UpdateValue() *CustomerTokensUpsertOne {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *CustomerTokensUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerTokensCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerTokensUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerTokensUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerTokensUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerTokensCreateBulk is the builder for creating many CustomerTokens entities in bulk.
type CustomerTokensCreateBulk struct {
	config
	err      error
	builders []*CustomerTokensCreate
	conflict []sql.ConflictOption
}

// Save creates the CustomerTokens entities in the database.
func (ctcb *CustomerTokensCreateBulk) Save(ctx context.Context) ([]*CustomerTokens, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CustomerTokens, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerTokensMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ctcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CustomerTokensCreateBulk) SaveX(ctx context.Context) []*CustomerTokens {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CustomerTokensCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CustomerTokensCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerTokens.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerTokensUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
func (ctcb *CustomerTokensCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerTokensUpsertBulk {
	ctcb.conflict = opts
	return &CustomerTokensUpsertBulk{
		create: ctcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerTokens.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctcb *CustomerTokensCreateBulk) OnConflictColumns(columns ...string) *CustomerTokensUpsertBulk {
	ctcb.conflict = append(ctcb.conflict, sql.ConflictColumns(columns...))
	return &CustomerTokensUpsertBulk{
		create: ctcb,
	}
}

// CustomerTokensUpsertBulk is the builder for "upsert"-ing
// a bulk of CustomerTokens nodes.
type CustomerTokensUpsertBulk struct {
	create *CustomerTokensCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CustomerTokens.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerTokensUpsertBulk) UpdateNewValues() *CustomerTokensUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerTokens.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerTokensUpsertBulk) Ignore() *CustomerTokensUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerTokensUpsertBulk) DoNothing() *CustomerTokensUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerTokensCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerTokensUpsertBulk) Update(set func(*CustomerTokensUpsert)) *CustomerTokensUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerTokensUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *CustomerTokensUpsertBulk) SetAddress(v string) *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CustomerTokensUpsertBulk) UpdateAddress() *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateAddress()
	})
}

// SetProjectAddress sets the "project_address" field.
func (u *CustomerTokensUpsertBulk) SetProjectAddress(v string) *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetProjectAddress(v)
	})
}

// UpdateProjectAddress sets the "project_address" field to the value that was provided on create.
func (u *CustomerTokensUpsertBulk) UpdateProjectAddress() *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateProjectAddress()
	})
}

// SetSlot sets the "slot" field.
func (u *CustomerTokensUpsertBulk) SetSlot(v int) *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetSlot(v)
	})
}

// AddSlot adds v to the "slot" field.
func (u *CustomerTokensUpsertBulk) AddSlot(v int) *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.AddSlot(v)
	})
}

// UpdateSlot sets the "slot" field to the value that was provided on create.
func (u *CustomerTokensUpsertBulk) UpdateSlot() *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateSlot()
	})
}

// SetTokenID sets the "token_id" field.
func (u *CustomerTokensUpsertBulk) SetTokenID(v string) *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *CustomerTokensUpsertBulk) UpdateTokenID() *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateTokenID()
	})
}

// SetValue sets the "value" field.
func (u *CustomerTokensUpsertBulk) SetValue(v string) *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CustomerTokensUpsertBulk) UpdateValue() *CustomerTokensUpsertBulk {
	return u.Update(func(s *CustomerTokensUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *CustomerTokensUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CustomerTokensCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerTokensCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerTokensUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
