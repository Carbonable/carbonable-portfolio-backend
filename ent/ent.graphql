directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type CustomerTokens implements Node {
  id: ID!
  address: String!
  projectAddress: String!
  slot: Int!
  tokenID: String!
  value: String!
  project: [Project!]
}
"""
CustomerTokensWhereInput is used for filtering CustomerTokens objects.
Input was generated by ent.
"""
input CustomerTokensWhereInput {
  not: CustomerTokensWhereInput
  and: [CustomerTokensWhereInput!]
  or: [CustomerTokensWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """
  project_address field predicates
  """
  projectAddress: String
  projectAddressNEQ: String
  projectAddressIn: [String!]
  projectAddressNotIn: [String!]
  projectAddressGT: String
  projectAddressGTE: String
  projectAddressLT: String
  projectAddressLTE: String
  projectAddressContains: String
  projectAddressHasPrefix: String
  projectAddressHasSuffix: String
  projectAddressEqualFold: String
  projectAddressContainsFold: String
  """
  slot field predicates
  """
  slot: Int
  slotNEQ: Int
  slotIn: [Int!]
  slotNotIn: [Int!]
  slotGT: Int
  slotGTE: Int
  slotLT: Int
  slotLTE: Int
  """
  token_id field predicates
  """
  tokenID: String
  tokenIDNEQ: String
  tokenIDIn: [String!]
  tokenIDNotIn: [String!]
  tokenIDGT: String
  tokenIDGTE: String
  tokenIDLT: String
  tokenIDLTE: String
  tokenIDContains: String
  tokenIDHasPrefix: String
  tokenIDHasSuffix: String
  tokenIDEqualFold: String
  tokenIDContainsFold: String
  """
  value field predicates
  """
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
  """
  project edge predicates
  """
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/carbonable/carbonable-portfolio-backend/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Project implements Node {
  id: ID!
  address: String!
  slot: Int!
  minterAddress: String!
  name: String!
  abi: String!
  image: String!
  yielderAddress: String
  offseterAddress: String
  tokens: [CustomerTokens!]
}
"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """
  slot field predicates
  """
  slot: Int
  slotNEQ: Int
  slotIn: [Int!]
  slotNotIn: [Int!]
  slotGT: Int
  slotGTE: Int
  slotLT: Int
  slotLTE: Int
  """
  minter_address field predicates
  """
  minterAddress: String
  minterAddressNEQ: String
  minterAddressIn: [String!]
  minterAddressNotIn: [String!]
  minterAddressGT: String
  minterAddressGTE: String
  minterAddressLT: String
  minterAddressLTE: String
  minterAddressContains: String
  minterAddressHasPrefix: String
  minterAddressHasSuffix: String
  minterAddressEqualFold: String
  minterAddressContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  image field predicates
  """
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageEqualFold: String
  imageContainsFold: String
  """
  yielder_address field predicates
  """
  yielderAddress: String
  yielderAddressNEQ: String
  yielderAddressIn: [String!]
  yielderAddressNotIn: [String!]
  yielderAddressGT: String
  yielderAddressGTE: String
  yielderAddressLT: String
  yielderAddressLTE: String
  yielderAddressContains: String
  yielderAddressHasPrefix: String
  yielderAddressHasSuffix: String
  yielderAddressIsNil: Boolean
  yielderAddressNotNil: Boolean
  yielderAddressEqualFold: String
  yielderAddressContainsFold: String
  """
  offseter_address field predicates
  """
  offseterAddress: String
  offseterAddressNEQ: String
  offseterAddressIn: [String!]
  offseterAddressNotIn: [String!]
  offseterAddressGT: String
  offseterAddressGTE: String
  offseterAddressLT: String
  offseterAddressLTE: String
  offseterAddressContains: String
  offseterAddressHasPrefix: String
  offseterAddressHasSuffix: String
  offseterAddressIsNil: Boolean
  offseterAddressNotNil: Boolean
  offseterAddressEqualFold: String
  offseterAddressContainsFold: String
  """
  tokens edge predicates
  """
  hasTokens: Boolean
  hasTokensWith: [CustomerTokensWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
}
